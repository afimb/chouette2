version: 2
aliases:
  - &GCP-auth
    name: GCP Authenticate
    command: |
      echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
      /tools/gcp_authenticate.sh
  - &docker-login
    name: Docker login
    command: |
      docker login -u _json_key --password-stdin https://eu.gcr.io <<< "${DOCKER_PASSWORD}"
  - &tag-git-version
    name: Tag git commit with build version and push to github
    command: |
      git config --global user.email "circleci@entur.no"
      git config --global user.name "circleci"
      git tag $VERSION
      git push origin $VERSION
  - &create-image-version
    name: Create new image version and store to env var and as file in workspace
    command: |
      echo "export VERSION=$CIRCLE_BRANCH-v$CIRCLE_BUILD_NUM-$(echo -n $CIRCLE_SHA1 | tail -c 8)"  >> $BASH_ENV
      echo "$CIRCLE_BRANCH-v$CIRCLE_BUILD_NUM-$(echo -n $CIRCLE_SHA1 | tail -c 8)" > version
  - &read-image-version
    name: Read new image version from workspace
    command: |
      echo "export VERSION=$(cat ./version)" >> $BASH_ENV
  - &docker-build-and-push
    name: Docker build and push
    command: |
      IMAGE="eu.gcr.io/entur-system-1287/${CIRCLE_PROJECT_REPONAME}"
      echo "Image: ${IMAGE}"
      docker build -t $IMAGE .
      docker tag $IMAGE "${IMAGE}":"${VERSION}"
      docker push $IMAGE

jobs:
  build:
    docker:
      - image: ruby:2.3.8-stretch
        auth:
          username: $DOCKERHUB_LOGIN
          password: $DOCKERHUB_PASSWORD
      - image: mdillon/postgis:9.6
        auth:
          username: $DOCKERHUB_LOGIN
          password: $DOCKERHUB_PASSWORD
        environment:
          TZ: Europe/Oslo
          POSTGRES_DB: chouette_test
          POSTGRES_USER: chouette
          POSTGRES_PASSWORD: chouette
    steps:
      - checkout
      - run:
          name: Copy test config file before running tests
          command: |
            cp .circleci/application.yml config/application.yml
      - run:
          name: apt update
          command: apt-get update
      - run:
          name: Install apt-dependencies
          command: apt-get install -y libpq-dev libsqlite3-dev libxml2 libxml2-dev libxslt-dev python-pydot python-pydot-ng graphviz libproj-dev libgeos-dev libffi-dev libsparsehash-dev
      - run:
          name: Install Bundler
          command: gem install bundler -v 1.13.6
      - run:
          name: Copy default database config file
          command: cp config/database.example.yml config/database.yml
      - run:
          name: Create locale folder
          command: mkdir -p locales
      - run:
          name: Print some info and versions
          command: |
            set -o xtrace
            ruby -v
            gem list bundler
            bundler -v
      - run:
          name: Bundle install
          command: |
            set -o xtrace
            bundle config build.nokogiri --use-system-libraries --with-xml2-include=/usr/include/libxml2
            bundle install --deployment
      - run:
          name: Rake create and migrate
          command: |
            bundle exec rake db:create
            bundle exec rake db:migrate
      - run:
          name: Rake spec
          command: |
            export RAIL_ENV=test
            bundle exec rake db:reset
            bundle exec rake spec
      - store_test_results:
          path: test_results
      - run: *create-image-version
      - run: *tag-git-version
      - persist_to_workspace:
          root: ~/project
          paths:
            - version
  deploy-docker:
    docker:
      - image: eu.gcr.io/entur-system-1287/circleci-toolbox-image-java11
        auth:
          username: _json_key
          password: $DOCKER_PASSWORD
    environment:
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - setup_remote_docker:
          docker_layer_caching: true
      - run: *GCP-auth
      - run: *docker-login
      - run: *read-image-version
      - run: *docker-build-and-push

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
         context: org-carbon
      -  deploy-docker:
           context: org-carbon
           requires:
             - build
           filters:
             branches:
               only: rutebanken_develop

version: 2.1
orbs:
  docker: circleci/docker@0.5.20
  slack: circleci/slack@2.2.0
executors:
  cci-toolbox:
    docker:
      - image: eu.gcr.io/entur-system-1287/circleci-toolbox-image
        auth:
          username: _json_key
          password: $DOCKER_PASSWORD
    environment:
      DEBIAN_FRONTEND: "noninteractive"
      MAVEN_OPTS: -Xmx3G

  entur-cci-toolbox:
    docker:
      - image: entur/cci-toolbox:2.0

aliases:
  - &GCP-auth
    name: GCP Authentication for Google Cloud Deploy
    command: |
      echo $GCLOUD_SERVICE_KEY > ${HOME}/account-auth.json
      gcloud auth activate-service-account --key-file ${HOME}/account-auth.json
      gcloud beta container clusters get-credentials $CLOUDSDK_CONTAINER_CLUSTER --region $CLOUDSDK_COMPUTE_ZONE --project $CLOUDSDK_CORE_PROJECT

  - &docker-login
    name: Docker login
    command: |
      docker login -u _json_key --password-stdin https://eu.gcr.io \<<< "${DOCKER_PASSWORD}"

  - &get-new-image-version
    name: Getting release version from app_version file
    command: |
      echo "export APP_VERSION=$(cat ./gcr.image.version)" >> $BASH_ENV

  - &update-helm-chart
    name: Set version in helm dir to $APP_VERSION
    command: |
      echo "Setting helm versions to $APP_VERSION"
      pushd helm/chouette2
      sed -i "s/version:.*$/version: '$APP_VERSION'/g"  ./Chart.yaml
      sed -i "s/appVersion:.*$/appVersion: '$APP_VERSION'/g"  ./Chart.yaml
      popd

  - &team-ror-circleci-slackhook
      https://hooks.slack.com/services/${SLACK_API_KEY_CIRCLE_CI}

  - &team-ror-releases-slackhook
      https://hooks.slack.com/services/${SLACK_API_KEY_RELEASES}

  - &deploy-payload
      "*Ready to Deploy*: <$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_REPONAME #$CIRCLE_PREVIOUS_BUILD_NUM> to *$NAMESPACE*\n
      Repository: <https://circleci.com/bb/enturas/workflows/$CIRCLE_PROJECT_REPONAME|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME>\n
      Branch: <https://circleci.com/bb/enturas/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH|$CIRCLE_BRANCH>\n
      Version: $APP_VERSION \n
      User: $CIRCLE_USERNAME"

  - &success-payload
      ":tada: Job $CIRCLE_STAGE has succeeded!\n
   Version: $APP_VERSION \n
   User: $CIRCLE_USERNAME"

  - &failure-payload
      ":red_circle: Job $CIRCLE_STAGE has failed!\n
   Version: $APP_VERSION \n
   User: $CIRCLE_USERNAME"

commands:
  save-image-name:
    parameters:
      image-version:
        type: string
        default: $BRANCH_IMAGE_NAME-SNAPSHOT
    steps:
      - run:
          command: echo "$CIRCLE_BRANCH-v$CIRCLE_BUILD_NUM-$(echo -n $CIRCLE_SHA1 | tail -c 8)" > ./gcr.image.version
      - persist_to_workspace:
          root: .
          paths: ./gcr.image.version
  slack-status:
    parameters:
      success_payload:
        type: string
        default: *success-payload
    steps:
      - attach_workspace:
          at: .
      - run: *get-new-image-version
      - slack/status:
          webhook: *team-ror-circleci-slackhook
          success_message: << parameters.success_payload >>
          failure_message: *failure-payload
jobs:
  build:
    docker:
      - image: eu.gcr.io/entur-system-1287/circleci-toolbox-image
        auth:
          username: _json_key
          password: $DOCKER_PASSWORD
      - image: mdillon/postgis:9.6
        environment:
          TZ: Europe/Oslo
          POSTGRES_DB: chouette_test
          POSTGRES_USER: chouette
          POSTGRES_PASSWORD: chouette
    steps:
      - checkout
      - run:
          name: Copy test config file before running tests
          command: |
            cp .circleci/application.yml config/application.yml
      - run:
          name: apt update
          command: apt-get update
      - run:
          name: Install apt-dependencies
          command: apt-get install -y libpq-dev libsqlite3-dev libxml2 libxml2-dev libxslt-dev python-pydot python-pydot-ng graphviz libproj-dev libgeos-dev libffi-dev libsparsehash-dev
      - run:
          name: Copy default database config file
          command: cp config/database.example.yml config/database.yml
      - run:
          name: Create locale folder
          command: mkdir -p locales
      - run:
          name: Print some info and versions
          command: |
            set -o xtrace
            ruby -v
            gem list bundler
            bundler -v
      - run:
          name: Bundle install
          command: |
            set -o xtrace
            bundle config build.nokogiri --use-system-libraries --with-xml2-include=/usr/include/libxml2
            bundle install --deployment
      - run:
          name: Rake create and migrate
          command: |
            bundle exec rake db:create
            bundle exec rake db:migrate
      - run:
          name: Rake spec
          command: |
            export RAIL_ENV=test
            bundle exec rake db:reset
            bundle exec rake spec
      - store_test_results:
          path: test_results
  deploy-docker:
    executor: entur-cci-toolbox
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: *docker-login
      - docker/build:
          image: chouette2
          tag: $CIRCLE_BRANCH-v$CIRCLE_BUILD_NUM-$(echo -n $CIRCLE_SHA1 | tail -c 8)
          registry: eu.gcr.io/entur-system-1287
      - docker/push:
          image: chouette2
          tag: $CIRCLE_BRANCH-v$CIRCLE_BUILD_NUM-$(echo -n $CIRCLE_SHA1 | tail -c 8)
          registry: eu.gcr.io/entur-system-1287

  deploy-helm:
    executor: entur-cci-toolbox
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: *get-new-image-version
      - run: *update-helm-chart
      - run: *GCP-auth
      - run:
          name: Deploy Helm chart to Kubernetes
          command: helm upgrade --install chouette2 ./helm/chouette2 --values=./helm/chouette2/values.yaml --values=./helm/chouette2/values-$NAMESPACE.yaml --namespace=$NAMESPACE
      - slack-status
  slack-approval:
    executor: slack/alpine
    steps:
      - attach_workspace:
          at: .
      - run: *get-new-image-version
      - slack/approval:
          webhook: *team-ror-releases-slackhook
          message: *deploy-payload

workflows:
  version: 2.1
  build_test_deploy:
    jobs:
      - build:
          name: build-release
          context: dev
      -  deploy-docker:
           name: push-release
           context: dev
           requires:
             - build-release
           post-steps:
             - save-image-name
           filters:
             branches:
               only: rutebanken_develop
      - deploy-helm:
          name: deploy-dev-release
          context: dev
          requires:
            - push-release
      - slack-approval:
          name: staging-deploy-message-release
          context: stage
          requires:
            - deploy-dev-release
      - approve-staging-release:
          type: approval
          requires:
            - staging-deploy-message-release
      - deploy-helm:
          name: deploy-staging-release
          context: stage
          requires:
            - approve-staging-release
      - slack-approval:
          name: production-deploy-message-release
          context: production
          requires:
            - deploy-staging-release
      - approve-production-release:
          type: approval
          requires:
            - production-deploy-message-release
      - deploy-helm:
          name: deploy-production-release
          context: production
          requires:
            - approve-production-release